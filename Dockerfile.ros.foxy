#
# this dockerfile roughly follows the 'Install ROS From Source' procedures from:
#   https://index.ros.org/doc/ros2/Installation/Foxy/Linux-Development-Setup/
#
ARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.5.0
FROM ${BASE_IMAGE}

ARG ROS_PKG=ros_base
ENV ROS_DISTRO=foxy
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}

ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"] 

WORKDIR /tmp

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8


# 
# add the ROS deb repo to the apt sources list
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		curl \
		wget \
		gnupg2 \
		lsb-release \
		ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null


# 
# install development packages
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		build-essential \
		cmake \
		git \
		libbullet-dev \
		libpython3-dev \
		python3-colcon-common-extensions \
		python3-flake8 \
		python3-pip \
		python3-numpy \
		python3-pytest-cov \
		python3-rosdep \
		python3-setuptools \
		python3-vcstool \
		python3-rosinstall-generator \
		libasio-dev \
		libtinyxml2-dev \
		libcunit1-dev \
		libgazebo9-dev \
		gazebo9 \
		gazebo9-common \
		gazebo9-plugin-base \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# install some pip packages needed for testing
RUN python3 -m pip install -U \
		argcomplete \
		flake8-blind-except \
		flake8-builtins \
		flake8-class-newline \
		flake8-comprehensions \
		flake8-deprecated \
		flake8-docstrings \
		flake8-import-order \
		flake8-quotes \
		pytest-repeat \
		pytest-rerunfailures \
		pytest

# 
# install OpenCV (with CUDA)
#
ARG OPENCV_URL=https://nvidia.box.com/shared/static/5v89u6g5rb62fpz4lh0rz531ajo2t5ef.gz
ARG OPENCV_DEB=OpenCV-4.5.0-aarch64.tar.gz

RUN apt-get purge -y '*opencv*' || echo "previous OpenCV installation not found" && \
    mkdir opencv && \
    cd opencv && \
    wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${OPENCV_URL} -O ${OPENCV_DEB} && \
    tar -xzvf ${OPENCV_DEB} && \
    dpkg -i --force-depends *.deb && \
    apt-get update && \
    apt-get install -y -f --no-install-recommends && \
    dpkg -i *.deb && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    cd ../ && \
    rm -rf opencv && \
    cp -r /usr/include/opencv4 /usr/local/include/opencv4 && \
    cp -r /usr/lib/python3.6/dist-packages/cv2 /usr/local/lib/python3.6/dist-packages/cv2
	

# 
# upgrade cmake - https://stackoverflow.com/a/56690743
# this is needed to build some of the ROS2 packages
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		  software-properties-common \
		  apt-transport-https \
		  ca-certificates \
		  gnupg \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean
		  	  
RUN wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - && \
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \
    apt-get update && \
    apt-get install -y --no-install-recommends --only-upgrade \
            cmake \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean
    
RUN cmake --version


# 
# compile yaml-cpp-0.6, which some ROS packages may use (but is not in the 18.04 apt repo)
#
RUN git clone --branch yaml-cpp-0.6.0 https://github.com/jbeder/yaml-cpp yaml-cpp-0.6 && \
    cd yaml-cpp-0.6 && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j$(nproc) && \
    cp libyaml-cpp.so.0.6.0 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/lib/aarch64-linux-gnu/libyaml-cpp.so.0.6.0 /usr/lib/aarch64-linux-gnu/libyaml-cpp.so.0.6


# 
# download/build ROS from source
#
RUN mkdir -p ${ROS_ROOT}/src && \
    cd ${ROS_ROOT} && \
    # https://answers.ros.org/question/325245/minimal-ros2-installation/?answer=325249#post-id-325249
    rosinstall_generator --deps --rosdistro ${ROS_DISTRO} ${ROS_PKG} \
		launch_xml \
		launch_yaml \
		launch_testing \
		launch_testing_ament_cmake \
		demo_nodes_cpp \
		demo_nodes_py \
		example_interfaces \
		camera_calibration_parsers \
		camera_info_manager \
		cv_bridge \
		v4l2_camera \
		vision_opencv \
		vision_msgs \
		image_geometry \
		image_pipeline \
		image_transport \
		compressed_image_transport \
		compressed_depth_image_transport \
		> ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
    cat ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
    vcs import src < ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
    # install dependencies using rosdep
    apt-get update && \
    cd ${ROS_ROOT} && \
    rosdep init && \
    rosdep update && \
    rosdep install -y \
    	  --ignore-src \
       --from-paths src \
	  --rosdistro ${ROS_DISTRO} \
	  --skip-keys "libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv" && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    # build it!
    colcon build \
        --merge-install \
        --cmake-args -DCMAKE_BUILD_TYPE=Release && \
    # remove build files
    rm -rf ${ROS_ROOT}/src && \
    rm -rf ${ROS_ROOT}/logs && \
    rm -rf ${ROS_ROOT}/build && \
    rm ${ROS_ROOT}/*.rosinstall


#
# fix broken package.xml in test_pluginlib that crops up if/when rosdep is run again
#
#   Error(s) in package '/opt/ros/foxy/build/pluginlib/prefix/share/test_pluginlib/package.xml':
#   Package 'test_pluginlib' must declare at least one maintainer
#   The package node must contain at least one "license" tag
#
#RUN TEST_PLUGINLIB_PACKAGE="${ROS_ROOT}/build/pluginlib/prefix/share/test_pluginlib/package.xml" && \
#    sed -i '/<\/description>/a <license>BSD<\/license>' $TEST_PLUGINLIB_PACKAGE && \
#    sed -i '/<\/description>/a <maintainer email="michael@openrobotics.org">Michael Carroll<\/maintainer>' $TEST_PLUGINLIB_PACKAGE && \
#    cat $TEST_PLUGINLIB_PACKAGE
    
    
#
# Set the default DDS middleware to cyclonedds
# https://github.com/ros2/rclcpp/issues/1335
#
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

# Install Arrayfire

WORKDIR /root
RUN mkdir boost_dir && cd boost_dir
RUN wget https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source/boost_1_74_0.tar.bz2 && \
	tar --bzip2 -xf boost_1_74_0.tar.bz2 && \
	cd boost_1_74_0 && \
	./bootstrap.sh && \
	./b2 install && \
	sh -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/local.conf' && \
	ldconfig

RUN apt install -y build-essential git cmake libfreeimage-dev
RUN apt-get update
RUN apt install -y cmake-curses-gui
RUN apt install -y libopenblas-dev libfftw3-dev liblapacke-dev
RUN cd && \
	git clone --recursive https://github.com/arrayfire/arrayfire.git && \
	cd arrayfire && \
	mkdir build && cd build && \
	cmake .. -DAF_BUILD_OPENCL=OFF -DCMAKE_BUILD_TYPE=Release -DAF_BUILD_EXAMPLES=OFF -DBUILD_TEST=OFF -DBUILD_GRAPHICS=OFF %% \
	make -j4 %% \
	make install


# #
# # Install Arrayfire
# #
# RUN apt update
# RUN apt install -y gnupg2 ca-certificates software-properties-common
# RUN apt update
# RUN apt install -y apt-utils wget build-essential git cmake libfreeimage-dev cmake-curses-gui
# RUN cd /tmp
# RUN wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
# 	apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
# 	sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list' && \
# 	apt update
# # RUN apt-get install -y gnupg2 ca-certificates software-properties-common
# # RUN apt-get update && apt-get install -y apt-utils
# RUN apt install build-essential cmake cmake-curses-gui
# RUN apt install libfreeimage3
# # RUN python3 -m pip install scikit-learn
# # RUN apt install libatlas3gf-base libatlas-base-dev libfftw3-dev liblapacke-dev
# RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/arm64/7fa2af80.pub
# RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/arm64/cuda-ubuntu1804.pin && \
# 	mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
# RUN wget https://repo.arrayfire.com/GPG-PUB-KEY-ARRAYFIRE-2020.PUB && \
# 	apt-key add GPG-PUB-KEY-ARRAYFIRE-2020.PUB && \
# 	sh -c 'echo deb [arch=amd64] https://repo.arrayfire.com/ubuntu bionic main > /etc/apt/sources.list.d/arrayfire.list' && \
# 	apt update
# # RUN apt-key adv --fetch-key https://repo.arrayfire.com/GPG-PUB-KEY-ARRAYFIRE-2020.PUB
# # RUN apt-add-repository "deb [arch=amd64] https://repo.arrayfire.com/ubuntu bionic main"
# # RUN apt update
# RUN apt install -y arrayfire-dev
# RUN apt install -y arrayfire

# # # ==================================================================
# # # arrayfire https://github.com/arrayfire/arrayfire/wiki/
# # # ------------------------------------------------------------------
# # RUN cd /tmp && git clone --branch v3.8 --recursive https://github.com/arrayfire/arrayfire.git && \
# # # RUN cd /tmp && wget https://github.com/arrayfire/arrayfire/releases/download/v3.8.1/arrayfire-full-3.8.1.tar.bz2
# #     cd arrayfire && git checkout b443e14 && \
# #     mkdir build && cd build && \
# #     cmake .. -DCMAKE_BUILD_TYPE=Release && \
# #     make -j8 && \
# #     make install && \
# # # ========================================================= =========
# # # config & cleanup
# # # ------------------------------------------------------------------
# #     ldconfig && \
# #     apt-get clean && \
# #     apt-get autoremove && \
# #     rm -rf /var/lib/apt/lists/* /tmp/* ~/*

# ENV DEBIAN_FRONTEND=nonintercative

# RUN apt-get update && apt-get install -y software-properties-common && \
#     apt-get install -y --no-install-recommends \
#         build-essential \
#         clinfo \
#         cmake \
#         git \
#         libboost-all-dev \
#         libfftw3-dev \
#         libfontconfig1-dev \
#         libfreeimage-dev \
#         liblapack-dev \
#         liblapacke-dev \
#         libopenblas-dev \
#         ocl-icd-opencl-dev \
#         opencl-headers \
#         wget \
#         xorg-dev && \
#     rm -rf /var/lib/apt/lists/*

# # Setting up symlinks for libcuda and OpenCL ICD
# RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1 && \
#     ln -s /usr/lib/libcuda.so.1 /usr/lib/libcuda.so && \
#     mkdir -p /etc/OpenCL/vendors && \
#     echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd && \
#     echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
#     echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
# ENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}

# WORKDIR /root

# # Build GLFW from source
# RUN git clone --depth 1 --branch 3.3.4 https://github.com/glfw/glfw.git && \
#     cd glfw && \
#     mkdir build && \
#     cd build && \
#     cmake -DCMAKE_INSTALL_PREFIX=/usr .. && \
#     make -j4 && \
#     make install

# RUN cd /tmp && \
#     wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
#     apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
#     rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
#     echo "deb https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list && \
#     add-apt-repository "deb https://apt.repos.intel.com/oneapi all main" && \
#     apt update -y
# # RUN apt install -y intel-basekit
# #
# # AF_DISABLE_GRAPHICS - Environment variable to disable graphics at
# # runtime due to lack of graphics support by docker - visit
# # http://arrayfire.org/docs/configuring_environment.htm#af_disable_graphics
# # for more information
# ENV AF_PATH=/opt/arrayfire AF_DISABLE_GRAPHICS=1
# ARG COMPILE_GRAPHICS=OFF
# # RUN source /opt/intel/oneapi/setvars.sh
# RUN git clone --depth 1 --recursive https://github.com/arrayfire/arrayfire.git -b master && \
#     cd arrayfire && mkdir build && cd build && \
#     cmake .. -DCMAKE_INSTALL_PREFIX=/opt/arrayfire-3 \
#              -DCMAKE_BUILD_TYPE=Release \
#              -DAF_BUILD_CPU=ON \
#              -DAF_BUILD_CUDA=ON \
#              -DAF_BUILD_DOCS=OFF \
#              -DAF_BUILD_EXAMPLES=ON \
#              -DAF_BUILD_OPENCL=ON \
#              -DAF_BUILD_UNIFIED=ON \
#              -DAF_WITH_FREEIMAGE_STATIC=OFF && \
#              # -DCOMPUTES_DETECTED_LIST="30;35;37;50;52;60" \
#     make -j8 && make install && \
#     mkdir -p ${AF_PATH} && ln -s /opt/arrayfire-3/* ${AF_PATH}/ && \
#     echo "${AF_PATH}/lib" >> /etc/ld.so.conf.d/arrayfire.conf && \
#     echo "/usr/local/cuda/nvvm/lib64" >> /etc/ld.so.conf.d/arrayfire.conf && \
#     ldconfig
    
# 
# setup entrypoint
#
COPY ./packages/ros_entrypoint.sh /ros_entrypoint.sh

RUN sed -i \
    's/ros_env_setup="\/opt\/ros\/$ROS_DISTRO\/setup.bash"/ros_env_setup="${ROS_ROOT}\/install\/setup.bash"/g' \
    /ros_entrypoint.sh && \
    cat /ros_entrypoint.sh

RUN echo 'source ${ROS_ROOT}/install/setup.bash' >> /root/.bashrc
RUN echo 'source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash' >> /root/.bashrc
RUN echo 'source /ws/install/setup.bash' >> /root/.bashrc

RUN apt-get update && \
	apt-get install nano

RUN python3 -m pip install --upgrade Pillow

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
WORKDIR /
